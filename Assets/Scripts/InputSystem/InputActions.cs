//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputSystem
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""41c5a0b7-3bc4-4848-af63-1a092d123e64"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0e272402-f9de-496c-a028-7ae6ec3893c8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MeleeAttack-Light"",
                    ""type"": ""Button"",
                    ""id"": ""a3bcb211-1539-4f20-b01a-e89d68239dac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MeleeAttack-Heavy"",
                    ""type"": ""Button"",
                    ""id"": ""3f5d03ef-7c50-4980-a851-ae85ccd839e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""765ef12d-7b5a-463f-a561-5ea2b2f15512"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""024ccf79-40f8-49e4-8c3b-0d8601dfc397"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""78501711-93d8-4f6a-b05f-1fd9b4374b1b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""32edf993-937d-40f3-a2fc-a82b05b071aa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""67263707-b50f-41f4-86e6-a44f399c0aab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""14f9cffa-38d5-4c06-ab8e-80826168a7f9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""12deb60f-3a9a-4647-9246-19f0797caa72"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2c336220-9169-49b9-8558-1b5195d34495"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e3d6f443-4443-4853-a0cb-7d369b5aaab9"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""62b5df90-52e4-4d86-93c3-dab5ee9cf51b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a31116c9-9f0f-4b26-90f9-66c8c4effa00"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeAttack-Light"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6421be18-593f-44b9-a411-332d6dca169d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeAttack-Heavy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ui"",
            ""id"": ""03ed6653-1358-4911-a26f-b8bff29e7e43"",
            ""actions"": [
                {
                    ""name"": ""dialogue-transition"",
                    ""type"": ""Button"",
                    ""id"": ""baedac76-97d1-461e-b681-434cb0beb6c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1f98476-68b1-4a2a-8031-81227c3ca391"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dialogue-transition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
            m_Player_MeleeAttackLight = m_Player.FindAction("MeleeAttack-Light", throwIfNotFound: true);
            m_Player_MeleeAttackHeavy = m_Player.FindAction("MeleeAttack-Heavy", throwIfNotFound: true);
            // Ui
            m_Ui = asset.FindActionMap("Ui", throwIfNotFound: true);
            m_Ui_dialoguetransition = m_Ui.FindAction("dialogue-transition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Movement;
        private readonly InputAction m_Player_MeleeAttackLight;
        private readonly InputAction m_Player_MeleeAttackHeavy;
        public struct PlayerActions
        {
            private @InputActions m_Wrapper;
            public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Player_Movement;
            public InputAction @MeleeAttackLight => m_Wrapper.m_Player_MeleeAttackLight;
            public InputAction @MeleeAttackHeavy => m_Wrapper.m_Player_MeleeAttackHeavy;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @MeleeAttackLight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMeleeAttackLight;
                    @MeleeAttackLight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMeleeAttackLight;
                    @MeleeAttackLight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMeleeAttackLight;
                    @MeleeAttackHeavy.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMeleeAttackHeavy;
                    @MeleeAttackHeavy.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMeleeAttackHeavy;
                    @MeleeAttackHeavy.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMeleeAttackHeavy;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @MeleeAttackLight.started += instance.OnMeleeAttackLight;
                    @MeleeAttackLight.performed += instance.OnMeleeAttackLight;
                    @MeleeAttackLight.canceled += instance.OnMeleeAttackLight;
                    @MeleeAttackHeavy.started += instance.OnMeleeAttackHeavy;
                    @MeleeAttackHeavy.performed += instance.OnMeleeAttackHeavy;
                    @MeleeAttackHeavy.canceled += instance.OnMeleeAttackHeavy;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Ui
        private readonly InputActionMap m_Ui;
        private IUiActions m_UiActionsCallbackInterface;
        private readonly InputAction m_Ui_dialoguetransition;
        public struct UiActions
        {
            private @InputActions m_Wrapper;
            public UiActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @dialoguetransition => m_Wrapper.m_Ui_dialoguetransition;
            public InputActionMap Get() { return m_Wrapper.m_Ui; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UiActions set) { return set.Get(); }
            public void SetCallbacks(IUiActions instance)
            {
                if (m_Wrapper.m_UiActionsCallbackInterface != null)
                {
                    @dialoguetransition.started -= m_Wrapper.m_UiActionsCallbackInterface.OnDialoguetransition;
                    @dialoguetransition.performed -= m_Wrapper.m_UiActionsCallbackInterface.OnDialoguetransition;
                    @dialoguetransition.canceled -= m_Wrapper.m_UiActionsCallbackInterface.OnDialoguetransition;
                }
                m_Wrapper.m_UiActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @dialoguetransition.started += instance.OnDialoguetransition;
                    @dialoguetransition.performed += instance.OnDialoguetransition;
                    @dialoguetransition.canceled += instance.OnDialoguetransition;
                }
            }
        }
        public UiActions @Ui => new UiActions(this);
        public interface IPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnMeleeAttackLight(InputAction.CallbackContext context);
            void OnMeleeAttackHeavy(InputAction.CallbackContext context);
        }
        public interface IUiActions
        {
            void OnDialoguetransition(InputAction.CallbackContext context);
        }
    }
}
